// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// rv_core_ibex.corei
//   -> s1n_16
//     -> sm1_17
//       -> rom_ctrl.rom
//     -> sm1_18
//       -> rv_dm.mem
//     -> sm1_19
//       -> sram_ctrl_main.ram
//     -> sm1_20
//       -> flash_ctrl.mem
// rv_core_ibex.cored
//   -> s1n_21
//     -> sm1_17
//       -> rom_ctrl.rom
//     -> sm1_22
//       -> rom_ctrl.regs
//     -> sm1_18
//       -> rv_dm.mem
//     -> sm1_23
//       -> rv_dm.regs
//     -> sm1_19
//       -> sram_ctrl_main.ram
//     -> sm1_25
//       -> asf_24
//         -> peri
//     -> sm1_27
//       -> asf_26
//         -> spi_host0
//     -> sm1_28
//       -> flash_ctrl.core
//     -> sm1_29
//       -> flash_ctrl.prim
//     -> sm1_20
//       -> flash_ctrl.mem
//     -> sm1_30
//       -> rv_plic
//     -> sm1_31
//       -> sram_ctrl_main.regs
//     -> sm1_32
//       -> rv_core_ibex.cfg
// rv_dm.sba
//   -> s1n_33
//     -> sm1_17
//       -> rom_ctrl.rom
//     -> sm1_22
//       -> rom_ctrl.regs
//     -> sm1_18
//       -> rv_dm.mem
//     -> sm1_23
//       -> rv_dm.regs
//     -> sm1_19
//       -> sram_ctrl_main.ram
//     -> sm1_25
//       -> asf_24
//         -> peri
//     -> sm1_27
//       -> asf_26
//         -> spi_host0
//     -> sm1_28
//       -> flash_ctrl.core
//     -> sm1_29
//       -> flash_ctrl.prim
//     -> sm1_20
//       -> flash_ctrl.mem
//     -> sm1_30
//       -> rv_plic
//     -> sm1_31
//       -> sram_ctrl_main.regs
//     -> sm1_32
//       -> rv_core_ibex.cfg

module xbar_main (
  input clk_main_i,
  input clk_fixed_i,
  input clk_spi_host0_i,
  input rst_main_ni,
  input rst_fixed_ni,
  input rst_spi_host0_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__corei_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__corei_o,
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__cored_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__cored_o,
  input  tlul_pkg::tl_h2d_t tl_rv_dm__sba_i,
  output tlul_pkg::tl_d2h_t tl_rv_dm__sba_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rv_dm__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__regs_i,
  output tlul_pkg::tl_h2d_t tl_rv_dm__mem_o,
  input  tlul_pkg::tl_d2h_t tl_rv_dm__mem_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__regs_i,
  output tlul_pkg::tl_h2d_t tl_peri_o,
  input  tlul_pkg::tl_d2h_t tl_peri_i,
  output tlul_pkg::tl_h2d_t tl_spi_host0_o,
  input  tlul_pkg::tl_d2h_t tl_spi_host0_i,
  output tlul_pkg::tl_h2d_t tl_flash_ctrl__core_o,
  input  tlul_pkg::tl_d2h_t tl_flash_ctrl__core_i,
  output tlul_pkg::tl_h2d_t tl_flash_ctrl__prim_o,
  input  tlul_pkg::tl_d2h_t tl_flash_ctrl__prim_i,
  output tlul_pkg::tl_h2d_t tl_flash_ctrl__mem_o,
  input  tlul_pkg::tl_d2h_t tl_flash_ctrl__mem_i,
  output tlul_pkg::tl_h2d_t tl_rv_plic_o,
  input  tlul_pkg::tl_d2h_t tl_rv_plic_i,
  output tlul_pkg::tl_h2d_t tl_rv_core_ibex__cfg_o,
  input  tlul_pkg::tl_d2h_t tl_rv_core_ibex__cfg_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__regs_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__regs_i,
  output tlul_pkg::tl_h2d_t tl_sram_ctrl_main__ram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_ctrl_main__ram_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_16_us_h2d ;
  tl_d2h_t tl_s1n_16_us_d2h ;


  tl_h2d_t tl_s1n_16_ds_h2d [4];
  tl_d2h_t tl_s1n_16_ds_d2h [4];

  // Create steering signal
  logic [2:0] dev_sel_s1n_16;


  tl_h2d_t tl_sm1_17_us_h2d [3];
  tl_d2h_t tl_sm1_17_us_d2h [3];

  tl_h2d_t tl_sm1_17_ds_h2d ;
  tl_d2h_t tl_sm1_17_ds_d2h ;


  tl_h2d_t tl_sm1_18_us_h2d [3];
  tl_d2h_t tl_sm1_18_us_d2h [3];

  tl_h2d_t tl_sm1_18_ds_h2d ;
  tl_d2h_t tl_sm1_18_ds_d2h ;


  tl_h2d_t tl_sm1_19_us_h2d [3];
  tl_d2h_t tl_sm1_19_us_d2h [3];

  tl_h2d_t tl_sm1_19_ds_h2d ;
  tl_d2h_t tl_sm1_19_ds_d2h ;


  tl_h2d_t tl_sm1_20_us_h2d [3];
  tl_d2h_t tl_sm1_20_us_d2h [3];

  tl_h2d_t tl_sm1_20_ds_h2d ;
  tl_d2h_t tl_sm1_20_ds_d2h ;

  tl_h2d_t tl_s1n_21_us_h2d ;
  tl_d2h_t tl_s1n_21_us_d2h ;


  tl_h2d_t tl_s1n_21_ds_h2d [13];
  tl_d2h_t tl_s1n_21_ds_d2h [13];

  // Create steering signal
  logic [3:0] dev_sel_s1n_21;


  tl_h2d_t tl_sm1_22_us_h2d [2];
  tl_d2h_t tl_sm1_22_us_d2h [2];

  tl_h2d_t tl_sm1_22_ds_h2d ;
  tl_d2h_t tl_sm1_22_ds_d2h ;


  tl_h2d_t tl_sm1_23_us_h2d [2];
  tl_d2h_t tl_sm1_23_us_d2h [2];

  tl_h2d_t tl_sm1_23_ds_h2d ;
  tl_d2h_t tl_sm1_23_ds_d2h ;

  tl_h2d_t tl_asf_24_us_h2d ;
  tl_d2h_t tl_asf_24_us_d2h ;
  tl_h2d_t tl_asf_24_ds_h2d ;
  tl_d2h_t tl_asf_24_ds_d2h ;


  tl_h2d_t tl_sm1_25_us_h2d [2];
  tl_d2h_t tl_sm1_25_us_d2h [2];

  tl_h2d_t tl_sm1_25_ds_h2d ;
  tl_d2h_t tl_sm1_25_ds_d2h ;

  tl_h2d_t tl_asf_26_us_h2d ;
  tl_d2h_t tl_asf_26_us_d2h ;
  tl_h2d_t tl_asf_26_ds_h2d ;
  tl_d2h_t tl_asf_26_ds_d2h ;


  tl_h2d_t tl_sm1_27_us_h2d [2];
  tl_d2h_t tl_sm1_27_us_d2h [2];

  tl_h2d_t tl_sm1_27_ds_h2d ;
  tl_d2h_t tl_sm1_27_ds_d2h ;


  tl_h2d_t tl_sm1_28_us_h2d [2];
  tl_d2h_t tl_sm1_28_us_d2h [2];

  tl_h2d_t tl_sm1_28_ds_h2d ;
  tl_d2h_t tl_sm1_28_ds_d2h ;


  tl_h2d_t tl_sm1_29_us_h2d [2];
  tl_d2h_t tl_sm1_29_us_d2h [2];

  tl_h2d_t tl_sm1_29_ds_h2d ;
  tl_d2h_t tl_sm1_29_ds_d2h ;


  tl_h2d_t tl_sm1_30_us_h2d [2];
  tl_d2h_t tl_sm1_30_us_d2h [2];

  tl_h2d_t tl_sm1_30_ds_h2d ;
  tl_d2h_t tl_sm1_30_ds_d2h ;


  tl_h2d_t tl_sm1_31_us_h2d [2];
  tl_d2h_t tl_sm1_31_us_d2h [2];

  tl_h2d_t tl_sm1_31_ds_h2d ;
  tl_d2h_t tl_sm1_31_ds_d2h ;


  tl_h2d_t tl_sm1_32_us_h2d [2];
  tl_d2h_t tl_sm1_32_us_d2h [2];

  tl_h2d_t tl_sm1_32_ds_h2d ;
  tl_d2h_t tl_sm1_32_ds_d2h ;

  tl_h2d_t tl_s1n_33_us_h2d ;
  tl_d2h_t tl_s1n_33_us_d2h ;


  tl_h2d_t tl_s1n_33_ds_h2d [13];
  tl_d2h_t tl_s1n_33_ds_d2h [13];

  // Create steering signal
  logic [3:0] dev_sel_s1n_33;



  assign tl_sm1_17_us_h2d[0] = tl_s1n_16_ds_h2d[0];
  assign tl_s1n_16_ds_d2h[0] = tl_sm1_17_us_d2h[0];

  assign tl_sm1_18_us_h2d[0] = tl_s1n_16_ds_h2d[1];
  assign tl_s1n_16_ds_d2h[1] = tl_sm1_18_us_d2h[0];

  assign tl_sm1_19_us_h2d[0] = tl_s1n_16_ds_h2d[2];
  assign tl_s1n_16_ds_d2h[2] = tl_sm1_19_us_d2h[0];

  assign tl_sm1_20_us_h2d[0] = tl_s1n_16_ds_h2d[3];
  assign tl_s1n_16_ds_d2h[3] = tl_sm1_20_us_d2h[0];

  assign tl_sm1_17_us_h2d[1] = tl_s1n_21_ds_h2d[0];
  assign tl_s1n_21_ds_d2h[0] = tl_sm1_17_us_d2h[1];

  assign tl_sm1_22_us_h2d[0] = tl_s1n_21_ds_h2d[1];
  assign tl_s1n_21_ds_d2h[1] = tl_sm1_22_us_d2h[0];

  assign tl_sm1_18_us_h2d[1] = tl_s1n_21_ds_h2d[2];
  assign tl_s1n_21_ds_d2h[2] = tl_sm1_18_us_d2h[1];

  assign tl_sm1_23_us_h2d[0] = tl_s1n_21_ds_h2d[3];
  assign tl_s1n_21_ds_d2h[3] = tl_sm1_23_us_d2h[0];

  assign tl_sm1_19_us_h2d[1] = tl_s1n_21_ds_h2d[4];
  assign tl_s1n_21_ds_d2h[4] = tl_sm1_19_us_d2h[1];

  assign tl_sm1_25_us_h2d[0] = tl_s1n_21_ds_h2d[5];
  assign tl_s1n_21_ds_d2h[5] = tl_sm1_25_us_d2h[0];

  assign tl_sm1_27_us_h2d[0] = tl_s1n_21_ds_h2d[6];
  assign tl_s1n_21_ds_d2h[6] = tl_sm1_27_us_d2h[0];

  assign tl_sm1_28_us_h2d[0] = tl_s1n_21_ds_h2d[7];
  assign tl_s1n_21_ds_d2h[7] = tl_sm1_28_us_d2h[0];

  assign tl_sm1_29_us_h2d[0] = tl_s1n_21_ds_h2d[8];
  assign tl_s1n_21_ds_d2h[8] = tl_sm1_29_us_d2h[0];

  assign tl_sm1_20_us_h2d[1] = tl_s1n_21_ds_h2d[9];
  assign tl_s1n_21_ds_d2h[9] = tl_sm1_20_us_d2h[1];

  assign tl_sm1_30_us_h2d[0] = tl_s1n_21_ds_h2d[10];
  assign tl_s1n_21_ds_d2h[10] = tl_sm1_30_us_d2h[0];

  assign tl_sm1_31_us_h2d[0] = tl_s1n_21_ds_h2d[11];
  assign tl_s1n_21_ds_d2h[11] = tl_sm1_31_us_d2h[0];

  assign tl_sm1_32_us_h2d[0] = tl_s1n_21_ds_h2d[12];
  assign tl_s1n_21_ds_d2h[12] = tl_sm1_32_us_d2h[0];

  assign tl_sm1_17_us_h2d[2] = tl_s1n_33_ds_h2d[0];
  assign tl_s1n_33_ds_d2h[0] = tl_sm1_17_us_d2h[2];

  assign tl_sm1_22_us_h2d[1] = tl_s1n_33_ds_h2d[1];
  assign tl_s1n_33_ds_d2h[1] = tl_sm1_22_us_d2h[1];

  assign tl_sm1_18_us_h2d[2] = tl_s1n_33_ds_h2d[2];
  assign tl_s1n_33_ds_d2h[2] = tl_sm1_18_us_d2h[2];

  assign tl_sm1_23_us_h2d[1] = tl_s1n_33_ds_h2d[3];
  assign tl_s1n_33_ds_d2h[3] = tl_sm1_23_us_d2h[1];

  assign tl_sm1_19_us_h2d[2] = tl_s1n_33_ds_h2d[4];
  assign tl_s1n_33_ds_d2h[4] = tl_sm1_19_us_d2h[2];

  assign tl_sm1_25_us_h2d[1] = tl_s1n_33_ds_h2d[5];
  assign tl_s1n_33_ds_d2h[5] = tl_sm1_25_us_d2h[1];

  assign tl_sm1_27_us_h2d[1] = tl_s1n_33_ds_h2d[6];
  assign tl_s1n_33_ds_d2h[6] = tl_sm1_27_us_d2h[1];

  assign tl_sm1_28_us_h2d[1] = tl_s1n_33_ds_h2d[7];
  assign tl_s1n_33_ds_d2h[7] = tl_sm1_28_us_d2h[1];

  assign tl_sm1_29_us_h2d[1] = tl_s1n_33_ds_h2d[8];
  assign tl_s1n_33_ds_d2h[8] = tl_sm1_29_us_d2h[1];

  assign tl_sm1_20_us_h2d[2] = tl_s1n_33_ds_h2d[9];
  assign tl_s1n_33_ds_d2h[9] = tl_sm1_20_us_d2h[2];

  assign tl_sm1_30_us_h2d[1] = tl_s1n_33_ds_h2d[10];
  assign tl_s1n_33_ds_d2h[10] = tl_sm1_30_us_d2h[1];

  assign tl_sm1_31_us_h2d[1] = tl_s1n_33_ds_h2d[11];
  assign tl_s1n_33_ds_d2h[11] = tl_sm1_31_us_d2h[1];

  assign tl_sm1_32_us_h2d[1] = tl_s1n_33_ds_h2d[12];
  assign tl_s1n_33_ds_d2h[12] = tl_sm1_32_us_d2h[1];

  assign tl_s1n_16_us_h2d = tl_rv_core_ibex__corei_i;
  assign tl_rv_core_ibex__corei_o = tl_s1n_16_us_d2h;

  assign tl_rom_ctrl__rom_o = tl_sm1_17_ds_h2d;
  assign tl_sm1_17_ds_d2h = tl_rom_ctrl__rom_i;

  assign tl_rv_dm__mem_o = tl_sm1_18_ds_h2d;
  assign tl_sm1_18_ds_d2h = tl_rv_dm__mem_i;

  assign tl_sram_ctrl_main__ram_o = tl_sm1_19_ds_h2d;
  assign tl_sm1_19_ds_d2h = tl_sram_ctrl_main__ram_i;

  assign tl_flash_ctrl__mem_o = tl_sm1_20_ds_h2d;
  assign tl_sm1_20_ds_d2h = tl_flash_ctrl__mem_i;

  assign tl_s1n_21_us_h2d = tl_rv_core_ibex__cored_i;
  assign tl_rv_core_ibex__cored_o = tl_s1n_21_us_d2h;

  assign tl_rom_ctrl__regs_o = tl_sm1_22_ds_h2d;
  assign tl_sm1_22_ds_d2h = tl_rom_ctrl__regs_i;

  assign tl_rv_dm__regs_o = tl_sm1_23_ds_h2d;
  assign tl_sm1_23_ds_d2h = tl_rv_dm__regs_i;

  assign tl_peri_o = tl_asf_24_ds_h2d;
  assign tl_asf_24_ds_d2h = tl_peri_i;

  assign tl_asf_24_us_h2d = tl_sm1_25_ds_h2d;
  assign tl_sm1_25_ds_d2h = tl_asf_24_us_d2h;

  assign tl_spi_host0_o = tl_asf_26_ds_h2d;
  assign tl_asf_26_ds_d2h = tl_spi_host0_i;

  assign tl_asf_26_us_h2d = tl_sm1_27_ds_h2d;
  assign tl_sm1_27_ds_d2h = tl_asf_26_us_d2h;

  assign tl_flash_ctrl__core_o = tl_sm1_28_ds_h2d;
  assign tl_sm1_28_ds_d2h = tl_flash_ctrl__core_i;

  assign tl_flash_ctrl__prim_o = tl_sm1_29_ds_h2d;
  assign tl_sm1_29_ds_d2h = tl_flash_ctrl__prim_i;

  assign tl_rv_plic_o = tl_sm1_30_ds_h2d;
  assign tl_sm1_30_ds_d2h = tl_rv_plic_i;

  assign tl_sram_ctrl_main__regs_o = tl_sm1_31_ds_h2d;
  assign tl_sm1_31_ds_d2h = tl_sram_ctrl_main__regs_i;

  assign tl_rv_core_ibex__cfg_o = tl_sm1_32_ds_h2d;
  assign tl_sm1_32_ds_d2h = tl_rv_core_ibex__cfg_i;

  assign tl_s1n_33_us_h2d = tl_rv_dm__sba_i;
  assign tl_rv_dm__sba_o = tl_s1n_33_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_16 = 3'd4;
    if ((tl_s1n_16_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL__ROM)) == ADDR_SPACE_ROM_CTRL__ROM) begin
      dev_sel_s1n_16 = 3'd0;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_16 = 3'd1;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_16 = 3'd2;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__MEM)) == ADDR_SPACE_FLASH_CTRL__MEM) begin
      dev_sel_s1n_16 = 3'd3;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_21 = 4'd13;
    if ((tl_s1n_21_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL__ROM)) == ADDR_SPACE_ROM_CTRL__ROM) begin
      dev_sel_s1n_21 = 4'd0;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL__REGS)) == ADDR_SPACE_ROM_CTRL__REGS) begin
      dev_sel_s1n_21 = 4'd1;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_21 = 4'd2;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_s1n_21 = 4'd3;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_21 = 4'd4;

    end else if (
      ((tl_s1n_21_us_h2d.a_address & ~(ADDR_MASK_PERI[0])) == ADDR_SPACE_PERI[0]) ||
      ((tl_s1n_21_us_h2d.a_address <= (ADDR_MASK_PERI[1] + ADDR_SPACE_PERI[1])) &&
       (tl_s1n_21_us_h2d.a_address >= ADDR_SPACE_PERI[1]))
    ) begin
      dev_sel_s1n_21 = 4'd5;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_SPI_HOST0)) == ADDR_SPACE_SPI_HOST0) begin
      dev_sel_s1n_21 = 4'd6;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__CORE)) == ADDR_SPACE_FLASH_CTRL__CORE) begin
      dev_sel_s1n_21 = 4'd7;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__PRIM)) == ADDR_SPACE_FLASH_CTRL__PRIM) begin
      dev_sel_s1n_21 = 4'd8;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__MEM)) == ADDR_SPACE_FLASH_CTRL__MEM) begin
      dev_sel_s1n_21 = 4'd9;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_s1n_21 = 4'd10;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_s1n_21 = 4'd11;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_s1n_21 = 4'd12;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_33 = 4'd13;
    if ((tl_s1n_33_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL__ROM)) == ADDR_SPACE_ROM_CTRL__ROM) begin
      dev_sel_s1n_33 = 4'd0;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL__REGS)) == ADDR_SPACE_ROM_CTRL__REGS) begin
      dev_sel_s1n_33 = 4'd1;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__MEM)) == ADDR_SPACE_RV_DM__MEM) begin
      dev_sel_s1n_33 = 4'd2;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_RV_DM__REGS)) == ADDR_SPACE_RV_DM__REGS) begin
      dev_sel_s1n_33 = 4'd3;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__RAM)) == ADDR_SPACE_SRAM_CTRL_MAIN__RAM) begin
      dev_sel_s1n_33 = 4'd4;

    end else if (
      ((tl_s1n_33_us_h2d.a_address & ~(ADDR_MASK_PERI[0])) == ADDR_SPACE_PERI[0]) ||
      ((tl_s1n_33_us_h2d.a_address <= (ADDR_MASK_PERI[1] + ADDR_SPACE_PERI[1])) &&
       (tl_s1n_33_us_h2d.a_address >= ADDR_SPACE_PERI[1]))
    ) begin
      dev_sel_s1n_33 = 4'd5;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_SPI_HOST0)) == ADDR_SPACE_SPI_HOST0) begin
      dev_sel_s1n_33 = 4'd6;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__CORE)) == ADDR_SPACE_FLASH_CTRL__CORE) begin
      dev_sel_s1n_33 = 4'd7;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__PRIM)) == ADDR_SPACE_FLASH_CTRL__PRIM) begin
      dev_sel_s1n_33 = 4'd8;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_FLASH_CTRL__MEM)) == ADDR_SPACE_FLASH_CTRL__MEM) begin
      dev_sel_s1n_33 = 4'd9;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_s1n_33 = 4'd10;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_SRAM_CTRL_MAIN__REGS)) == ADDR_SPACE_SRAM_CTRL_MAIN__REGS) begin
      dev_sel_s1n_33 = 4'd11;

    end else if ((tl_s1n_33_us_h2d.a_address &
                  ~(ADDR_MASK_RV_CORE_IBEX__CFG)) == ADDR_SPACE_RV_CORE_IBEX__CFG) begin
      dev_sel_s1n_33 = 4'd12;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (16'h0),
    .DRspDepth (16'h0),
    .N         (4)
  ) u_s1n_16 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_16_us_h2d),
    .tl_h_o       (tl_s1n_16_us_d2h),
    .tl_d_o       (tl_s1n_16_ds_h2d),
    .tl_d_i       (tl_s1n_16_ds_d2h),
    .dev_select_i (dev_sel_s1n_16)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_17 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_17_us_h2d),
    .tl_h_o       (tl_sm1_17_us_d2h),
    .tl_d_o       (tl_sm1_17_ds_h2d),
    .tl_d_i       (tl_sm1_17_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_18 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_18_us_h2d),
    .tl_h_o       (tl_sm1_18_us_d2h),
    .tl_d_o       (tl_sm1_18_ds_h2d),
    .tl_d_i       (tl_sm1_18_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (3)
  ) u_sm1_19 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_19_us_h2d),
    .tl_h_o       (tl_sm1_19_us_d2h),
    .tl_d_o       (tl_sm1_19_ds_h2d),
    .tl_d_i       (tl_sm1_19_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_20 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_20_us_h2d),
    .tl_h_o       (tl_sm1_20_us_d2h),
    .tl_d_o       (tl_sm1_20_ds_h2d),
    .tl_d_i       (tl_sm1_20_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (52'h0),
    .DRspDepth (52'h0),
    .N         (13)
  ) u_s1n_21 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_21_us_h2d),
    .tl_h_o       (tl_s1n_21_us_d2h),
    .tl_d_o       (tl_s1n_21_ds_h2d),
    .tl_d_i       (tl_s1n_21_ds_d2h),
    .dev_select_i (dev_sel_s1n_21)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_22 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_22_us_h2d),
    .tl_h_o       (tl_sm1_22_us_d2h),
    .tl_d_o       (tl_sm1_22_ds_h2d),
    .tl_d_i       (tl_sm1_22_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_23 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_23_us_h2d),
    .tl_h_o       (tl_sm1_23_us_d2h),
    .tl_d_o       (tl_sm1_23_ds_h2d),
    .tl_d_i       (tl_sm1_23_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf_24 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_fixed_i),
    .rst_d_ni     (rst_fixed_ni),
    .tl_h_i       (tl_asf_24_us_h2d),
    .tl_h_o       (tl_asf_24_us_d2h),
    .tl_d_o       (tl_asf_24_ds_h2d),
    .tl_d_i       (tl_asf_24_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_25 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_25_us_h2d),
    .tl_h_o       (tl_sm1_25_us_d2h),
    .tl_d_o       (tl_sm1_25_ds_h2d),
    .tl_d_i       (tl_sm1_25_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf_26 (
    .clk_h_i      (clk_main_i),
    .rst_h_ni     (rst_main_ni),
    .clk_d_i      (clk_spi_host0_i),
    .rst_d_ni     (rst_spi_host0_ni),
    .tl_h_i       (tl_asf_26_us_h2d),
    .tl_h_o       (tl_asf_26_us_d2h),
    .tl_d_o       (tl_asf_26_ds_h2d),
    .tl_d_i       (tl_asf_26_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_27 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_27_us_h2d),
    .tl_h_o       (tl_sm1_27_us_d2h),
    .tl_d_o       (tl_sm1_27_ds_h2d),
    .tl_d_i       (tl_sm1_27_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_28 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_28_us_h2d),
    .tl_h_o       (tl_sm1_28_us_d2h),
    .tl_d_o       (tl_sm1_28_ds_h2d),
    .tl_d_i       (tl_sm1_28_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_29 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_29_us_h2d),
    .tl_h_o       (tl_sm1_29_us_d2h),
    .tl_d_o       (tl_sm1_29_ds_h2d),
    .tl_d_i       (tl_sm1_29_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_30 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_30_us_h2d),
    .tl_h_o       (tl_sm1_30_us_d2h),
    .tl_d_o       (tl_sm1_30_ds_h2d),
    .tl_d_i       (tl_sm1_30_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_31 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_31_us_h2d),
    .tl_h_o       (tl_sm1_31_us_d2h),
    .tl_d_o       (tl_sm1_31_ds_h2d),
    .tl_d_i       (tl_sm1_31_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_32 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_32_us_h2d),
    .tl_h_o       (tl_sm1_32_us_d2h),
    .tl_d_o       (tl_sm1_32_ds_h2d),
    .tl_d_i       (tl_sm1_32_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqPass  (1'b0),
    .HRspPass  (1'b0),
    .DReqDepth (52'h0),
    .DRspDepth (52'h0),
    .N         (13)
  ) u_s1n_33 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_33_us_h2d),
    .tl_h_o       (tl_s1n_33_us_d2h),
    .tl_d_o       (tl_s1n_33_ds_h2d),
    .tl_d_i       (tl_s1n_33_ds_d2h),
    .dev_select_i (dev_sel_s1n_33)
  );

endmodule
